{"version":3,"sources":["App.model.ts","assets/bensound-dreams.mp3","assets/throw.mp3","App.service.ts","components/Tile.tsx","components/TileList.tsx","assets/click.wav","components/Controls.tsx","components/SettingRecord.tsx","components/Settings.tsx","components/ControlKeys.tsx","components/Game.tsx","App.tsx","reportWebVitals.ts","fontawesome.js","Header.tsx","Footer.tsx","index.tsx"],"names":["SettingRecordType","Keys","getEmptyCells","tileList","cellMatrix","filter","cell","find","tile","row","col","addRandomTiles","tilesQuantity","curEmptyCells","randomCells","Array","fill","forEach","_el","push","Math","floor","random","length","value","key","uuidv4","appeared","reduceTileLine","line","reduce","acc","curTile","curIdx","shouldDelete","mergedTile","merged","getCollapsedTileLine","collapseDirection","size","sort","a","b","newCol","map","i","arr","newRow","getCollapsedTileList","direction","clearedTileList","from","getTileRowsToCollapse","flat","getTileColsToCollapse","Tile","enterLeaveStyles","gameConfig","fontSize","tileWidth","calculateFontSize","styles","useSpring","top","tileGap","left","config","duration","height","width","div","className","isDarkTheme","style","TileList","items","keys","item","transform","enter","leave","Controls","startNewGame","toggleMusic","musicConfig","openSettings","startBtnIcon","useSound","click","volume","clickSound","icon","onClick","title","SettingRecord","settingRecordType","booleanValue","getNewValue","getNewBooleanValue","handleValue","increase","RowSize","NewTiles","shouldHide","btnOrder","Settings","openModal","passToParentGameConfig","closeSettings","useState","curGameConfig","setGameConfig","setGridConfig","gapCoeff","newTilesQuantity","ColorTheme","Game","playMusicConfig","musicOn","stopMusicConfig","list","localStorage","getItem","JSON","parse","setTileList","gameCount","setStartbtnico","gameOn","setGameOn","setMusicConfig","modalOpened","setModalOpened","controlKeysOpened","setControlKeysOpened","backgroundMusic","play","stop","sound","swishSound","swish","_val","j","useEffect","setItem","stringify","handleKeyPress","event","code","ArrowUp","KeyUp","ArrowDown","KeyDown","ArrowRight","KeyRight","ArrowLeft","KeyLeft","EscapeSettings","setFsbtnico","toggleModal","NewGame","collapsedList","addedCount","sum","expandedList","window","addEventListener","removeEventListener","shouldStopAutoplay","setAutoplay","setApbtnico","id","setResult","loop","fade","isOpened","toggleControlKeys","isAutoplay","apBtnIcon","timeoutIdx","setTimeout","clearInterval","fsBtnIcon","toggleFullScreen","document","documentElement","webkitRequestFullscreen","webkitExitFullscreen","handleFullscreen","gridConfig","result","position","right","padding","marginBottom","marginRight","fontWeight","newConfig","ControlKeys","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","library","add","faCode","faHighlighter","faVolumeMute","faGamepad","faGithub","faMusic","faStop","faCog","faCaretRight","faCaretLeft","faTimes","faExpandAlt","faCompressAlt","faPlay","faTimesCircle","faSyncAlt","faListOl","faListAlt","Header","Footer","href","target","src","alt","routing","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.9a653b35.chunk.js","sourcesContent":["import { IconName } from \"@fortawesome/fontawesome-svg-core\";\n\n// export type RowSize = 2 | 4 | 5 | 6 | 10;\nexport type RowSize = number;\n\nexport interface GameProps {\n  size: RowSize\n}\n\nexport interface GameConfig {\n  size: RowSize;\n  newTilesQuantity: number\n  tileWidth: number;\n  tileGap: number; \n  isDarkTheme?: boolean;\n  soundVolume?: number;\n  soundOn?: number;\n  gameCount?: number;\n }\n\nexport interface ControlsProps {\n  startNewGame: () => void;\n  openSettings: () => void;\n  toggleMusic: () => void;\n  musicConfig: MusicConfig;\n  startBtnIcon: IconName;\n}\n\nexport interface SettingsProps {\n  gameConfig: GameConfig;\n  openModal: boolean;\n  passToParentGameConfig: (value: GameConfig) => void;\n  closeSettings: () => void;\n}\n\nexport interface SettingRecordProps {\n  gameConfig: GameConfig;\n  settingRecordType: SettingRecordType;\n  value?: number;\n  booleanValue?:boolean;\n  getNewValue?: (value: number) => void;\n  getNewBooleanValue?: (value: boolean) => void;\n}\n\nexport enum SettingRecordType {\n  RowSize = 'Row size',\n  NewTiles  = 'New tiles',\n  // Language  = 'Language',\n  ColorTheme  = 'Color theme',\n  MusicVolume  = 'Music volume', \n  MusicOn  = 'Music play/stop',\n  SoundVolime  = 'Sounds volume',\n  SoundOn  = 'Mute sounds'\n}\n\nexport interface MusicConfig {\n  musicOn: boolean;\n  icon: IconName;\n  title: string;\n}\n\nexport interface TileProps {\n  tile: TileConfig;\n  enterLeaveStyles: any;\n  gameConfig: GameConfig;\n}\n\nexport interface TileConfig {\n  key: string;\n  row:  number;\n  col:  number;\n  value?:  TileValue;\n  appeared?: boolean;\n  merged?: boolean;\n  shouldDelete?: boolean;\n}\n\nexport type TileValue = 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024 | 2048;\n\nexport interface TileListProps {\n    tileList: TileConfig[];\n    gameConfig: GameConfig;\n}\n\nexport type CollapseDirection = 'right' | 'left' | 'up' | 'down';\n\nexport enum Keys {\n  ArrowUp = 'ArrowUp',\n  ArrowDown = 'ArrowDown',\n  ArrowLeft = 'ArrowLeft',\n  ArrowRight = 'ArrowRight',\n  KeyUp = 'KeyW',\n  KeyDown = 'KeyS',\n  KeyLeft = 'KeyA',\n  KeyRight = 'KeyD',\n  NewGame = 'KeyN',\n  Settings = 'KeyC',\n  EscapeSettings = 'Escape',\n}\n\nexport const quantity = 2;\n\nexport const boardWidth = 450\n\n","export default __webpack_public_path__ + \"static/media/bensound-dreams.c705f4ca.mp3\";","export default __webpack_public_path__ + \"static/media/throw.1e583756.mp3\";","import { v4 as uuidv4 } from 'uuid';\nimport { TileConfig, RowSize, CollapseDirection } from './App.model';\n\n\nexport const getCellMatrix = (length: RowSize) => {\n  return Array.from({ length }).reduce<TileConfig[]>((acc, _val, i) => {\n  acc.push(...Array.from({ length }, (_el, j) => ({\n    row: i + 1,\n    col: j + 1,\n  } as TileConfig)));\n  return acc\n  }, [])\n}\n\nexport const getEmptyCells = (tileList: TileConfig[], cellMatrix: TileConfig[]) =>\n    cellMatrix.filter((cell) => !tileList.find((tile) => tile.row === cell.row && tile.col === cell.col)\n);\n\nexport const addRandomTiles = ( cellMatrix: TileConfig[], tileList: TileConfig[], tilesQuantity = 2 ) => {\n  let curEmptyCells = getEmptyCells(tileList, cellMatrix);\n  let randomCells = [] as TileConfig[];\n\n  Array(tilesQuantity).fill(0).forEach(_el => {\n    randomCells.push({ ...curEmptyCells[Math.floor(Math.random() * curEmptyCells.length)], value: 2, key: uuidv4(), appeared: true})\n    curEmptyCells = getEmptyCells([...tileList, ...randomCells], cellMatrix);\n  })\n\n  return [...tileList, ...randomCells ]\n}\n\nconst reduceTileLine = (line: TileConfig[]) => (\n  line.reduce<TileConfig[]>((acc, curTile, curIdx, line) => {\n    if (curIdx + 1 < line.length && curTile.value === line[curIdx + 1].value && !curTile.shouldDelete) {\n      const mergedTile = {\n        ...curTile,\n        key: uuidv4(),\n        value: curTile.value && (curTile.value *= 2),\n        merged: true,\n      } as TileConfig\n      curTile.shouldDelete = true;\n      line[curIdx + 1].shouldDelete = true;\n      acc.push(mergedTile, curTile)\n    } else {\n      acc.push(curTile)\n    }\n  return acc;  \n  }, [] as TileConfig[])\n);\n\nconst getCollapsedTileLine = (line: TileConfig[], collapseDirection: CollapseDirection, size: RowSize) => {\n  switch (collapseDirection) {\n    case 'right': {\n      line.sort((a, b) => b.col - a.col) // sort from more to less\n      let newCol = size;\n      return reduceTileLine(line).map((tile, i, arr) => {\n        tile.col = newCol;\n        if (arr[i + 1] && !arr[i + 1].shouldDelete) {   //tiles for deletion should have same col with new merged tile ( order [merged, shouldDelete, shouldDelete])\n          newCol -= 1;\n        } \n        return tile;\n      }).sort((a, b) => a.col - b.col);\n    }\n    case 'left': {\n      line.sort((a, b) => a.col - b.col) // sort from less to more\n      let newCol = 1;\n      return reduceTileLine(line).map((tile, i, arr) => {\n        tile.col = newCol;\n        if (arr[i + 1] && !arr[i + 1].shouldDelete) {   //tiles for deletion should have same col with new merged tile\n          newCol += 1;\n        } \n        return tile;\n      });\n    }\n    case 'up': {\n      line.sort((a, b) => a.row - b.row) // sort from less to more\n      let newRow = 1;\n      return reduceTileLine(line).map((tile, i, arr) => {\n        tile.row = newRow;\n        if (arr[i + 1] && !arr[i + 1].shouldDelete) {   //tiles for deletion should have same col with new merged tile\n          newRow += 1;\n        } \n        return tile;\n      });\n    }\n    case 'down': {\n      line.sort((a, b) => b.row - a.row) // sort from more to less\n      let newRow = size;\n      return reduceTileLine(line).map((tile, i, arr) => {\n        tile.row = newRow;\n        if (arr[i + 1] && !arr[i + 1].shouldDelete) {   //tiles for deletion should have same col with new merged tile ( order [merged, shouldDelete, shouldDelete])\n          newRow -= 1;\n        } \n        return tile;\n      }).sort((a, b) => a.row - b.row);\n    }\n  }\n};\n\nconst getTileRowsToCollapse = (tileList: TileConfig[], length: RowSize): TileConfig[][] =>  (\n  Array.from( { length } ).map((_el, i) => tileList.filter(tile => tile.row === i + 1))\n);\n\nconst getTileColsToCollapse = (tileList: TileConfig[], length: RowSize): TileConfig[][] => (\n  Array.from( { length } ).map((_el, i) => tileList.filter(tile => tile.col === i + 1))\n);\n\n// main function\nexport const getCollapsedTileList = (\n  tileList: TileConfig[],\n  direction: CollapseDirection,\n  size: RowSize,\n) => {\n  const clearedTileList = tileList.filter(tile => !tile.shouldDelete )\n  clearedTileList.forEach(tile => { delete tile.appeared; delete tile.merged; });\n  switch (direction) {\n    case \"right\":\n    case \"left\":\n      const rows = getTileRowsToCollapse(clearedTileList, size);\n      const collapsedRows = rows.map((row) => getCollapsedTileLine(row, direction, size));\n      return collapsedRows.flat();\n    case \"up\":\n    case \"down\":\n      const cols = getTileColsToCollapse(clearedTileList, size);\n      const collapsedCols = cols.map((col) => getCollapsedTileLine(col, direction, size));\n      return collapsedCols.flat();\n  }\n};\n\n\nexport const calculateFontSize = (tile: TileConfig, tileWidth: number) => {\n  switch (tile.value) {\n    case 2:\n    case 4:\n    case 8:\n    case 16:\n    case 32:\n    case 64:\n      return tileWidth * 0.55;\n    case 128:\n    case 256:\n    case 512:\n      return tileWidth * 0.45;\n    case 1024:\n    case 2048:\n      return tileWidth * 0.35;\n  }\n}\n","import React from \"react\";\nimport { useSpring, animated } from 'react-spring';\nimport \"../App.scss\";\n\nimport { TileProps } from \"../App.model\";\nimport { calculateFontSize } from \"../App.service\";\n\nconst Tile: React.FC<TileProps> = ({ tile, enterLeaveStyles, gameConfig }) => {\n \n  const fontSize = calculateFontSize(tile, gameConfig.tileWidth);\n\n  const styles = useSpring({\n      top: (tile.row - 1) * (gameConfig.tileWidth + gameConfig.tileGap) + gameConfig.tileGap,\n      left: (tile.col - 1) * (gameConfig.tileWidth + gameConfig.tileGap) + gameConfig.tileGap,\n      config: { duration: 150 },\n      height: gameConfig.tileWidth,\n      width: gameConfig.tileWidth,\n      fontSize,\n  });\n\n    return (\n    <animated.div\n      className={`Tile Value-${tile.value} ${tile.merged ? 'Merged' : ''} ${gameConfig.isDarkTheme ? 'DarkTheme' : ''}`}\n      style={{ \n        ...styles, \n        ...enterLeaveStyles, \n      }}\n    >\n      {tile.value}\n    </animated.div>\n  );\n};\n\nexport default Tile;\n","import React from \"react\";\nimport { Transition } from 'react-spring/renderprops';\nimport \"../App.scss\";\n\nimport { TileListProps } from \"../App.model\";\nimport Tile from \"./Tile\";\n\n\nconst TileList: React.FC<TileListProps> = ({ tileList: items, gameConfig }) => (\n  <div>\n    <Transition\n      items={items}\n      keys={items.map(item => item.key)}\n      from={(item) => { return item.merged ? { transform: 'scale(1)' } : { transform: 'scale(0)' }}}\n      enter={{ transform: 'scale(1)' }}\n      leave={{ transform: 'scale(0)' }}\n      config={{duration: 0}}\n    >\n      {tile => styles => (\n        <Tile key={tile.key} tile={tile} enterLeaveStyles={styles} gameConfig={gameConfig}/>\n      )}\n    </Transition>\n  </div>\n)\n\nexport default TileList;\n","export default __webpack_public_path__ + \"static/media/click.504e3127.wav\";","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport click from  '../assets/click.wav'\n\nimport { ControlsProps } from '../App.model';\nimport useSound from 'use-sound';\n\nconst Controls: React.FC<ControlsProps> = ({ startNewGame, toggleMusic, musicConfig, openSettings, startBtnIcon  }) => {\n\n  const [ clickSound ] = useSound(click, { volume: 0.5 });\n\n  // const soundUrl = '/sounds/909-drums.mp3';\n  return (\n    <div className=\"Controls\">\n      <div className=\"ButtonWrapper\">\n        <button className=\"Button IconWrapper\">\n          <FontAwesomeIcon icon={['fas', musicConfig.icon]} onClick={() => (clickSound(),toggleMusic())} title={musicConfig.title}/>\n        </button>   \n      </div>\n      <div className=\"ButtonWrapper\">\n        <button className=\"Button IconWrapper\">\n          <FontAwesomeIcon icon={['fas', startBtnIcon]}  onClick={() => (clickSound(), startNewGame())} title='Game strat/finish (N)'/>\n        </button>\n        </div>\n      <div className=\"ButtonWrapper\">\n        <button className=\"Button IconWrapper\">\n          <FontAwesomeIcon className={ startBtnIcon === 'sync-alt' ? 'HideBtn' : ''} icon={['fas', 'cog']}  onClick={() => (clickSound(), openSettings())} title='Game settings (S)'/>\n        </button>   \n      </div>\n    </div>\n  );\n};\n\n\nexport default Controls","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport click from  '../assets/click.wav'\n\n\nimport { SettingRecordProps, SettingRecordType } from '../App.model';\nimport useSound from 'use-sound';\n\nconst SettingRecord: React.FC<SettingRecordProps> = ({ settingRecordType, value, booleanValue, getNewValue, getNewBooleanValue, gameConfig }) => {\n\n  const [ clickSound ] = useSound(click, { volume: 0.5 });\n\n  const handleValue = (increase: boolean) => {\n    clickSound();\n    if (getNewValue && value) {\n      switch (settingRecordType) {\n        case SettingRecordType.RowSize:\n          return increase ? getNewValue(value < 8 ? value += 1 : value)  : getNewValue(value > 4 ? value -= 1 : value);\n\n        case SettingRecordType.NewTiles:\n          return increase ? getNewValue(value < 3 ? value += 1 : value)  : getNewValue(value > 1 ? value -= 1 : value);\n      }\n    } else if (getNewBooleanValue && (booleanValue || booleanValue === false)) {\n      return getNewBooleanValue(!booleanValue);\n    }\n  }\n\n  const shouldHide = (btnOrder: string) => {\n    if (\n        btnOrder === \"open\" &&\n        (settingRecordType === SettingRecordType.RowSize && value === 4 ||\n      settingRecordType === SettingRecordType.NewTiles && value === 1)\n    ) {\n      return \"HideBtn\";\n    } else if (\n      btnOrder === \"close\" &&\n        (settingRecordType === SettingRecordType.RowSize && value === 8 ||\n      settingRecordType === SettingRecordType.NewTiles && value === 3)\n    ) {\n      return \"HideBtn\";\n    }\n  };\n\n  const getValueForRender = () => {\n    if (value) {\n      return value;\n    } else {\n      return booleanValue ? 'Dark' : 'Light'\n    }\n  }\n\n  return (\n    <div className=\"SettingRecordWrapper\">          \n      <p className=\"Name\"><b>{settingRecordType + ': '}</b></p> \n      <button className={`Button IconWrapper IconWrapper__settingRecord IconContainer ${gameConfig.isDarkTheme ? 'DarkTheme' : ''}`} >\n        <FontAwesomeIcon className={shouldHide('open')} icon={['fas', 'caret-left']} onClick={() => handleValue(false)} title='-'/>\n      </button>  \n      <p className=\"Value\"><b>{getValueForRender()}</b></p> \n      <button className={`Button IconWrapper IconWrapper__settingRecord IconContainer ${gameConfig.isDarkTheme ? 'DarkTheme' : ''}`}>\n        <FontAwesomeIcon className={shouldHide('close')} icon={['fas', 'caret-right']} onClick={() => handleValue(true)} title='+'/>\n      </button>   \n    </div>\n  );\n};\n\n\nexport default SettingRecord","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport useSound from 'use-sound';\nimport click from  '../assets/click.wav'\n\nimport { boardWidth, ControlsProps, GameConfig, RowSize, SettingRecordType, SettingsProps } from '../App.model';\nimport SettingRecord from './SettingRecord';\n\nconst Settings: React.FC<SettingsProps> = ({ openModal, passToParentGameConfig, gameConfig, closeSettings }) => {\n\n  const [ curGameConfig, setGameConfig ] = useState(gameConfig)\n  const [ clickSound ] = useSound(click, { volume: 0.5 });\n\n\n  const setGridConfig = ( size: RowSize): Omit<GameConfig, 'newTilesQuantity'> => {\n    const gapCoeff = 1/8\n    const tileWidth = boardWidth / (size + size * gapCoeff + gapCoeff);\n    const tileGap = tileWidth*gapCoeff;\n    return ({ size, tileWidth, tileGap })\n  } \n\n  const setNewRowSize = (size: RowSize) => {\n    setGameConfig({...curGameConfig, ...setGridConfig(size)});\n    passToParentGameConfig({...curGameConfig, ...setGridConfig(size)});\n  }\n  const setNewTilesQuantitys = (newTilesQuantity: number) => {\n    setGameConfig(curGameConfig);\n    setGameConfig({...curGameConfig, newTilesQuantity});\n    passToParentGameConfig({...curGameConfig, newTilesQuantity});\n  }\n\n  const setColorTheme = (isDarkTheme: boolean) => {\n    setGameConfig({...curGameConfig, isDarkTheme});\n    passToParentGameConfig({...curGameConfig, isDarkTheme});\n\n  }\n\n\n  return (\n    <>\n      <div className={`BackDrop ${openModal && \"SetBackDrop\"}`}></div>\n      <div className={`ModalDlg Description ${openModal && \"OpenModal\"} ${gameConfig.isDarkTheme ? 'DarkTheme' : ''}`}>\n        <div className=\"SettingsContentWrapper\">\n          <h3>Game settins:</h3>\n          <SettingRecord\n            gameConfig={gameConfig}\n            settingRecordType={SettingRecordType.RowSize}\n            value={curGameConfig.size}\n            getNewValue={(value) => setNewRowSize(value)}\n          />\n          <SettingRecord\n            gameConfig={gameConfig}\n            settingRecordType={SettingRecordType.NewTiles}\n            value={curGameConfig.newTilesQuantity}\n            getNewValue={(value) => setNewTilesQuantitys(value)}\n          />\n          <SettingRecord\n            gameConfig={gameConfig}\n            settingRecordType={SettingRecordType.ColorTheme}\n            booleanValue={curGameConfig.isDarkTheme}\n            getNewBooleanValue={(value) => setColorTheme(value)}\n          />\n          {/* <SettingRecord settingRecordType={SettingRecordType.ColorTheme} value={colorTheme} getNewValue={(value) => setColorTheme(value as string)} /> */}\n          <button className={`Button IconWrapper IconWrapper__closeBtn ${gameConfig.isDarkTheme ? 'DarkTheme' : ''}`}>\n            <FontAwesomeIcon\n              icon={[\"fas\", \"times\"]}\n              onClick={() =>  (clickSound(), closeSettings())}\n              title=\"Close (Esc)\"\n            />\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\n\nexport default Settings","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport useSound from 'use-sound';\nimport click from  '../assets/click.wav'\n\nimport { boardWidth, ControlsProps, GameConfig, RowSize, SettingRecordType, SettingsProps } from '../App.model';\nimport SettingRecord from './SettingRecord';\n\nconst Settings: React.FC<SettingsProps> = ({ openModal, gameConfig, closeSettings }) => {\n\n  const [ curGameConfig, setGameConfig ] = useState(gameConfig)\n  const [ clickSound ] = useSound(click, { volume: 0.5 });\n\nreturn (\n    <>\n      <div className={`BackDrop ${openModal && \"SetBackDrop\"}`}></div>\n      <div className={`ModalDlg Description ${openModal && \"OpenModal\"} ${gameConfig.isDarkTheme ? 'DarkTheme' : ''}`}>\n        <div className=\"SettingsContentWrapper\">\n          <h3>Controlls:</h3>\n          <div className=\"Description\">\n            <p>\n              <b>Gameplay</b>: Arrows or W, S, A, D\n            </p>\n            <p>\n              <b>Game strat / finish</b>: N\n            </p>\n            <p>\n              <b> Music start / stop</b>: M\n            </p>\n            <p>\n              <b>Game settings</b>: C\n            </p>\n            <p>\n              <b>Escape game settings</b>: Esc\n            </p>\n          </div>          \n          <button className={`Button IconWrapper IconWrapper__closeBtn ${gameConfig.isDarkTheme ? 'DarkTheme' : ''}`}>\n            <FontAwesomeIcon\n              icon={[\"fas\", \"times\"]}\n              onClick={() => (clickSound(), closeSettings())}\n              title=\"Close (Esc)\"\n            />\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\n\nexport default Settings","import React, { PropsWithChildren, useCallback, useEffect, useState } from 'react';\nimport useSound from 'use-sound';\n\nimport backgroundMusic from '../assets/bensound-dreams.mp3'\nimport swishSound from  '../assets/throw.mp3'\nimport { getCellMatrix, addRandomTiles as addRandomTiles, getCollapsedTileList, calculateFontSize } from '../App.service';\nimport {\n  CollapseDirection,\n  GameProps,\n  Keys,\n  TileConfig,\n  MusicConfig,\n  RowSize,\n  GameConfig,\n  boardWidth,\n} from '../App.model';\nimport '../App.scss';\nimport TileList from './TileList';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport Controls from './Controls';\nimport Settings from './Settings';\nimport { IconName } from '@fortawesome/fontawesome-svg-core';\nimport click from  '../assets/click.wav'\nimport ControlKeys from './ControlKeys';\n\n\nconst Game: React.FC = () => {\n\n  const playMusicConfig: MusicConfig = {\n    musicOn: false,\n    icon: 'music',\n    title: 'Play music (M)'\n  }\n\n  const stopMusicConfig: MusicConfig = {\n    musicOn: true,\n    icon: 'stop',\n    title: 'Play music (M)'\n  }\n\n  const defaultGameConfig: GameConfig = {\n    size: 4,\n    tileWidth: 100,\n    tileGap: 10,\n    newTilesQuantity: 2,\n    isDarkTheme: false,\n    gameCount: 0,\n  }\n\n  const list = localStorage.getItem('tileList')\n  const [ tileList, setTileList ] = useState(list ?  JSON.parse(list) as TileConfig[] : [] as TileConfig[]);   // set tileList !!!\n\n  const config = localStorage.getItem('gameConfig')\n  const [ gameConfig, setGameConfig ] = useState(config ?  JSON.parse(config) as GameConfig : defaultGameConfig);  \n  const [ startBtnIcon, setStartbtnico ] = useState((list && JSON.parse(list).length) ? 'sync-alt' : 'gamepad' as IconName);\n  const [ gameOn, setGameOn ] = useState(false);\n\n  const [ musicConfig, setMusicConfig ] = useState(playMusicConfig)\n  const [ modalOpened, setModalOpened ] = useState(false)\n  const [ controlKeysOpened, setControlKeysOpened ] = useState(false)\n\n  const [ play, { stop, sound } ] = useSound(backgroundMusic);\n  const [ swish ] = useSound(swishSound);\n  const [ clickSound ] = useSound(click, { volume: 0.5 });\n\n\n  // const [ gameConfig, setGameConfig ] = useState(defaultGameConfig);\n\n  const cellMatrix = getCellMatrix(gameConfig.size)\n\n\n  const setGameGrid = (gridConfig: GameConfig) => (\n    Array.from({length: gridConfig.size}, ((_el, i)=> {\n      return (\n        <div key={`cell-row-${i+1}`} className='Row' style={{ height: gridConfig.tileWidth, marginBottom: gridConfig.tileGap }}>\n          {Array.from({ length: gridConfig.size }, ((_el, j) => (\n            <div key={`cell-col-${j+1}`} className={`Cell ${gameConfig.isDarkTheme ? 'DarkTheme' : ''}`} style={{ height: gridConfig.tileWidth, width: gridConfig.tileWidth, marginRight: gridConfig.tileGap }}></div>\n          )))}\n        </div>\n      );\n    }))\n  )\n\n  // срабатывает полсе каждого рендера, при условии что изменились зависимости ( ..., [ ...] )\n  useEffect(() => {\n    localStorage.setItem('gameConfig', JSON.stringify(gameConfig));\n    localStorage.setItem('tileList', JSON.stringify(tileList));\n\n    // if (gameOn) {\n    const handleKeyPress = (event: KeyboardEvent) => {\n        const { code } = event\n        let sound = swish;\n        let direction: CollapseDirection = '' as CollapseDirection;\n        if (startBtnIcon === 'sync-alt') {\n\n          if (code === Keys.ArrowUp || code === Keys.KeyUp) {\n            direction = 'up';\n            sound = swish;\n          } else if  (code === Keys.ArrowDown || code === Keys.KeyDown) {\n            sound = swish;\n            direction = 'down';\n          }  else if  (code === Keys.ArrowRight || code === Keys.KeyRight) {\n            sound = swish;\n            direction = 'right';\n          } else if  (code === Keys.ArrowLeft || code === Keys.KeyLeft) {\n            sound = swish;\n            direction = 'left';\n          } \n        }\n        \n        if  (code === Keys.EscapeSettings) {\n          setModalOpened(false);\n          setFsbtnico('expand-alt');\n        } if  (code === Keys.Settings) {\n          toggleModal(modalOpened)\n        } if  (code === Keys.NewGame) {\n          startNewGame();\n        } \n        if (direction) {\n          sound()\n          const collapsedList = getCollapsedTileList(tileList, direction, gameConfig.size);\n          const addedCount = collapsedList.reduce((sum, tile) => {\n            if (tile.merged && tile.value) {\n              sum += tile.value\n            }\n            return sum;\n          }, 0)\n\n          const gameCount = gameConfig.gameCount ? gameConfig.gameCount + addedCount : addedCount;\n          setGameConfig({ ...gameConfig, gameCount })\n\n          const expandedList = addRandomTiles(cellMatrix, collapsedList, gameConfig.newTilesQuantity);\n          setTileList(expandedList)\n\n          direction = '' as CollapseDirection;\n        }\n    }\n    window.addEventListener('keydown', handleKeyPress);\n\n\n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    }\n    // }\n  }, [tileList, play])\n\n  const setGameWrapperStyle = () => ({\n    height: boardWidth,\n    width: boardWidth,\n    padding: gameConfig.tileGap\n  })\n\n//#region STARTGAME\nconst startNewGame = (shouldStopAutoplay: boolean = true) => {\n  if (shouldStopAutoplay) {\n    setAutoplay(false);\n    setApbtnico('play')\n    setGameOn(!gameOn);\n\n    if (startBtnIcon === 'gamepad') {\n      setStartbtnico('sync-alt')\n      setResult('');\n      let id: any\n      stop(id);\n      setMusicConfig(stopMusicConfig)\n      \n      const expandedList = addRandomTiles(cellMatrix, [], gameConfig.newTilesQuantity);\n      setTileList(expandedList)\n      id = play()\n      sound.loop(true);\n      sound.fade(0,0.2,2000, id)\n    } else {\n      setStartbtnico('gamepad')\n      stop();\n      setMusicConfig(stopMusicConfig);\n      setTileList([]);\n      setGameConfig({\n        ...gameConfig,\n        gameCount: 0\n      })\n    }\n  } else {\n    setResult('');\n    let id: any\n    stop(id);\n    setMusicConfig(stopMusicConfig)\n    \n    const expandedList = addRandomTiles(cellMatrix, [], gameConfig.newTilesQuantity);\n    setTileList(expandedList)\n    id = play()\n    sound.loop(true);\n    sound.fade(0,0.2,2000, id)\n  }\n\n}\n//#endregion STARTGAME\n\nconst toggleMusic = (config: MusicConfig) => {\n  // setMusicConfig(true)\n  if (config.musicOn) {\n    sound.fade(0.2,0,2000);\n    stop();\n    setMusicConfig(playMusicConfig);\n  } else {\n    play();\n    sound.loop(true);\n    sound.fade(0,0.2,2000);\n    setMusicConfig(stopMusicConfig);\n  }\n}\n\nconst toggleModal = (isOpened: boolean) => {\n  setModalOpened(!isOpened)\n}\n\nconst toggleControlKeys = (isOpened: boolean) => {\n  setControlKeysOpened(!isOpened)\n}\n\n\n//#region AUTOPLAY\nconst [ isAutoplay, setAutoplay ] = useState(false);\nconst [ apBtnIcon, setApbtnico ] = useState('play' as IconName);\nconst toggleAutoplay = () => {\n    setResult('');\n    clickSound();\n    setAutoplay(!isAutoplay);\n    if (!isAutoplay) {\n      setApbtnico('times-circle')\n      startNewGame(false);\n    } else {\n      setApbtnico('play')\n      stop();\n      setMusicConfig(stopMusicConfig);\n      setTileList([]);\n    }\n  }\nuseEffect(() => {\n  if (isAutoplay) {\n    const timeoutIdx = setTimeout(() => {\n      const idx = Math.floor(Math.random() * 4)\n      const direction = ['up', 'down', 'right', 'left'][Math.floor(Math.random() * 4)] as CollapseDirection;\n      const collapsedList = getCollapsedTileList(tileList, direction, gameConfig.size);\n      const expandedList = addRandomTiles(cellMatrix, collapsedList, gameConfig.newTilesQuantity);\n      setTileList(expandedList)\n    }, 600);\n    return () => {\n      clearInterval(timeoutIdx);\n    }\n  }\n}, [tileList, play])\n//#endregion AUTOPLAY\n\n//#region FULLSCREEN \n  const [ fsBtnIcon, setFsbtnico ] = useState('expand-alt' as IconName)\n  const toggleFullScreen = () => {\n    clickSound();\n    if (fsBtnIcon === 'expand-alt') {\n      (document.documentElement as HTMLElement & {\n        webkitRequestFullscreen(): Promise<void>;\n      }).webkitRequestFullscreen();\n    } else {\n      (document as Document & {\n        webkitExitFullscreen(): Promise<void>;\n      }).webkitExitFullscreen();\n    }\n  }\n  useEffect(() => {\n    const handleFullscreen = () => {\n      if (fsBtnIcon !== 'expand-alt') {\n        setFsbtnico('expand-alt')\n      } else {\n        setFsbtnico('compress-alt');\n      }\n    }\n    document.addEventListener('webkitfullscreenchange', handleFullscreen)\n    return () => { document.removeEventListener('webkitfullscreenchange', handleFullscreen); }\n  }, [toggleFullScreen])\n//#endregion FULLSCREEN \n\n//#region RESULT HANDLING \nconst [ result, setResult ] = useState('');\n\n//#endregion RESULT HANDLING \n\n\n  return (\n    <div className={`GameWrapper ${gameConfig.isDarkTheme ? 'DarkTheme' : ''}`}>\n\n      <div style={{\n          position: 'fixed',\n          top: '25px',\n          right: '50%',\n          transform: 'translate(230px)'}}>\n        <button className=\"Button IconWrapper IconWrapper__upperBtn\">\n          <FontAwesomeIcon className={ startBtnIcon === 'sync-alt' ? 'HideBtn' : ''} icon={['fas', apBtnIcon ]} onClick={() => toggleAutoplay()} title='Autoplay on/off'/>\n        </button>\n        <button className=\"Button IconWrapper IconWrapper__upperBtn\" title='Game controlls'>\n          <FontAwesomeIcon icon={['fas', 'list-alt' ]} onClick={() => toggleControlKeys(controlKeysOpened)}/>\n        </button>\n        <button className=\"Button IconWrapper IconWrapper__upperBtn\" title='Last 10 results'>\n          <FontAwesomeIcon icon={['fas', 'list-ol' ]} onClick={() => toggleControlKeys(controlKeysOpened)}/>\n        </button>\n        <button className=\"Button IconWrapper IconWrapper__upperBtn\"  onClick={() => toggleFullScreen()} title='Full screen on/off'>\n          <FontAwesomeIcon icon={['fas', fsBtnIcon ]}/>\n        </button>\n      </div>\n\n      <div className={`BoardWrapper ${gameConfig.isDarkTheme ? 'DarkTheme' : ''}`} style={setGameWrapperStyle()}>\n        <div className={`ResultOverLay ${result ? 'ShowResult' : ''} ${gameConfig.isDarkTheme ? 'DarkTheme' : ''}`}\n          onClick ={() => setResult('')}\n          >\n          {result}\n        </div>\n        <div className=\"GridWrapper\">{setGameGrid(gameConfig)}</div>\n        <TileList tileList={tileList} gameConfig={gameConfig} />\n      </div>\n      <Controls\n        startNewGame={() => startNewGame()}\n        startBtnIcon={startBtnIcon}\n        toggleMusic={() => toggleMusic(musicConfig)}\n        musicConfig={musicConfig}\n        openSettings={() => toggleModal(modalOpened)}\n      />\n      <div style={{fontSize: '64px', fontWeight: 'bold'}}>{gameConfig.gameCount}</div>      \n      <Settings\n        openModal={modalOpened}\n        passToParentGameConfig={(newConfig: GameConfig) => { setGameConfig(newConfig); }}\n        closeSettings={() => toggleModal(true)}\n        gameConfig={gameConfig}\n      />\n      <ControlKeys\n        openModal={controlKeysOpened}\n        passToParentGameConfig={(newConfig: GameConfig) => { setGameConfig(newConfig); }}\n        closeSettings={() => toggleControlKeys(true)}\n        gameConfig={gameConfig}\n      />\n    </div>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport './App.scss';\nimport Game from './components/Game';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport { faGithub } from '@fortawesome/free-brands-svg-icons';\nimport {\n  faCode,\n  faHighlighter,\n  faVolumeMute,\n  faGamepad,\n  faMusic,\n  faStop,\n  faCog,\n  faCaretRight,\n  faCaretLeft,\n  faTimes,\n  faCompressAlt,\n  faExpandAlt,\n  faPlay,\n  faTimesCircle,\n  faSyncAlt,\n  faListOl,\n  faListAlt\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(\n  faCode,\n  faHighlighter,\n  faVolumeMute,\n  faGamepad,\n  faGithub,\n  faMusic,\n  faStop,\n  faCog,\n  faCaretRight,\n  faCaretLeft,\n  faTimes,\n  faExpandAlt,\n  faCompressAlt,\n  faPlay,\n  faTimesCircle,\n  faSyncAlt,\n  faListOl,\n  faListAlt\n);","import React from 'react';\n\n\nfunction Header() {\n  return (\n    <div className=\"Header\">\n      <h1 className=\"Title\">\n        2048\n      </h1>\n    </div>\n  );\n}\n\nexport default Header;\n","import { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport React from \"react\";\n\nfunction Footer() {\n  return (\n    <div className='Footer'>\n\t\t\t<div className=\"HrefWrapper\" title=\"Author\">\n\t\t\t\t<a href=\"https://github.com/GYegor\"  target=\"_blank\"> \n\t\t\t\t\t<p><FontAwesomeIcon className=\"FaIcon\"  icon={['fab', 'github']} /></p>\n\t\t\t\t\t<p>GYegor</p>\n\t\t\t\t</a>\n\t\t\t</div>\n\t\t\t<div className=\"HrefWrapper\" title=\"Rolling Scopes School\">\n\t\t\t\t<a href=\"https://rs.school/js/\"  target=\"_blank\">\n\t\t\t\t\t<img src=\"https://rs.school/images/rs_school_js.svg\" alt=\"RSSchool logo\"/>\n\t\t\t\t</a>\n\t\t\t</div>\n    </div>\n  );\n}\n\nexport default Footer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './fontawesome'\nimport Header from './Header';\nimport Footer from './Footer';\n\n\nconst routing = (\n  <Router>\n    <div className=\"Main\">\n      <Header />\n      <App />\n      <div className=\"Spacer\"></div>\n      <Footer />\n    </div>\n  </Router>\n);\n\n\nReactDOM.render(routing,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}