{"version":3,"sources":["App.model.ts","components/AudioEffects.tsx","assets/bensound-dreams.mp3","assets/throw.mp3","App.service.ts","components/Tile.tsx","components/TileList.tsx","components/Game.tsx","App.tsx","reportWebVitals.ts","fontawesome.js","index.tsx"],"names":["Keys","tileWidth","tileGap","AudioEffects","className","getEmptyCells","tileList","cellMatrix","filter","cell","find","tile","row","col","addRandomTiles","tilesQuantity","curEmptyCells","randomCells","Array","fill","forEach","_el","push","Math","floor","random","length","value","key","uuidv4","appeared","reduceTileLine","line","reduce","acc","curTile","curIdx","shouldDelete","mergedTile","merged","getCollapsedTileLine","collapseDirection","size","sort","a","b","newCol","map","i","arr","newRow","getCollapsedTileList","direction","clearedTileList","from","getTileRowsToCollapse","flat","getTileColsToCollapse","Tile","enterLeaveStyles","fontSize","calculateFontSize","styles","useSpring","top","left","config","duration","height","width","div","style","TileList","items","keys","item","transform","enter","leave","Game","useState","setTileList","_val","j","gamedGrid","marginBottom","marginRight","useSound","swishSound","swish","useEffect","handleKeyPress","event","code","sound","ArrowUp","KeyUp","ArrowDown","KeyDown","ArrowRight","KeyRight","ArrowLeft","KeyLeft","collapsedList","expandedList","window","addEventListener","removeEventListener","bmId","gameWrapperStyle","padding","backgroundMusic","stop","notMuted","pause","onClick","fade","play","title","icon","mute","volume","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","library","add","faCode","faHighlighter","faVolumeMute","faGamepad","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.adff4fda.chunk.js","sourcesContent":["export type GameSize = 2 | 4 | 5 | 6 | 10;\n\nexport interface GameProps {\n  size: GameSize\n}\n\nexport interface TileProps {\n    tile: TileConfig;\n    enterLeaveStyles: any;\n}\n\nexport interface TileConfig {\n    key: string;\n    row:  number;\n    col:  number;\n    value?:  TileValue;\n    appeared?: boolean;\n    merged?: boolean;\n    shouldDelete?: boolean;\n}\n\nexport type TileValue = 2 | 4 | 8 | 16 | 32 | 64 | 128 | 256 | 512 | 1024 | 2048;\n\nexport interface TileListProps {\n    tileList: TileConfig[];\n}\n\nexport type CollapseDirection = 'right' | 'left' | 'up' | 'down';\n\nexport enum Keys {\n    ArrowUp = 'ArrowUp',\n    ArrowDown = 'ArrowDown',\n    ArrowLeft = 'ArrowLeft',\n    ArrowRight = 'ArrowRight',\n    KeyUp = 'KeyW',\n    KeyDown = 'KeyS',\n    KeyLeft = 'KeyA',\n    KeyRight = 'KeyD',\n}\n\nexport const defaultSize: GameSize = 4;\n\nexport const defaultTilesToAddQuantity = 2;\n\nexport const boardWidth = 450\n\nexport const tileWidth = 10*boardWidth/(11*defaultSize + 1) ;\n\nexport const tileGap = tileWidth/10;","import useSound from 'use-sound';\n\nimport swishTiles from  '../assets/swish.mp3'\n\nconst AudioEffects: React.FC = () => {\n\n  // const soundUrl = '/sounds/909-drums.mp3';\n\n\n\n\n  return (\n    <div className=\"AudioEffectPannel\">\n\n      {/* <button onClick={swish}>Swish!</button> */}\n    </div>\n  );\n};\n\ninterface AudioCintrols {\n  pause?: boolean,\n  mute?: boolean,\n  volume?: number,\n}\n\n\nconst MusicButtons: React.FC = (props) => {\n\n\n\n  return (\n    <div className=\"MusicRow\">\n\n      {/* <button onClick={swish}>Swish!</button> */}\n    </div>\n  );\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport default AudioEffects","export default __webpack_public_path__ + \"static/media/bensound-dreams.c705f4ca.mp3\";","export default __webpack_public_path__ + \"static/media/throw.1e583756.mp3\";","import { v4 as uuidv4 } from 'uuid';\nimport { TileConfig, GameSize, CollapseDirection } from './App.model';\n\n\nexport const getCellMatrix = (length: GameSize) => {\n  return Array.from({ length }).reduce<TileConfig[]>((acc, _val, i) => {\n  acc.push(...Array.from({ length }, (_el, j) => ({\n    row: i + 1,\n    col: j + 1,\n  } as TileConfig)));\n  return acc\n  }, [])\n}\n\nexport const getEmptyCells = (tileList: TileConfig[], cellMatrix: TileConfig[]) =>\n    cellMatrix.filter((cell) => !tileList.find((tile) => tile.row === cell.row && tile.col === cell.col)\n);\n\nexport const addRandomTiles = ( cellMatrix: TileConfig[], tileList: TileConfig[], tilesQuantity = 2 ) => {\n  let curEmptyCells = getEmptyCells(tileList, cellMatrix);\n  let randomCells = [] as TileConfig[];\n\n  Array(tilesQuantity).fill(0).forEach(_el => {\n    randomCells.push({ ...curEmptyCells[Math.floor(Math.random() * curEmptyCells.length)], value: 2, key: uuidv4(), appeared: true})\n    curEmptyCells = getEmptyCells([...tileList, ...randomCells], cellMatrix);\n  })\n\n  return [...tileList, ...randomCells ]\n}\n\nconst reduceTileLine = (line: TileConfig[]) => (\n  line.reduce<TileConfig[]>((acc, curTile, curIdx, line) => {\n    if (curIdx + 1 < line.length && curTile.value === line[curIdx + 1].value && !curTile.shouldDelete) {\n      const mergedTile = {\n        ...curTile,\n        key: uuidv4(),\n        value: curTile.value && (curTile.value *= 2),\n        merged: true,\n      } as TileConfig\n      curTile.shouldDelete = true;\n      line[curIdx + 1].shouldDelete = true;\n      acc.push(mergedTile, curTile)\n    } else {\n      acc.push(curTile)\n    }\n  return acc;  \n  }, [] as TileConfig[])\n);\n\nconst getCollapsedTileLine = (line: TileConfig[], collapseDirection: CollapseDirection, size: GameSize) => {\n  switch (collapseDirection) {\n    case 'right': {\n      line.sort((a, b) => b.col - a.col) // sort from more to less\n      let newCol = size;\n      return reduceTileLine(line).map((tile, i, arr) => {\n        tile.col = newCol;\n        if (arr[i + 1] && !arr[i + 1].shouldDelete) {   //tiles for deletion should have same col with new merged tile ( order [merged, shouldDelete, shouldDelete])\n          newCol -= 1;\n        } \n        return tile;\n      }).sort((a, b) => a.col - b.col);\n    }\n    case 'left': {\n      line.sort((a, b) => a.col - b.col) // sort from less to more\n      let newCol = 1;\n      return reduceTileLine(line).map((tile, i, arr) => {\n        tile.col = newCol;\n        if (arr[i + 1] && !arr[i + 1].shouldDelete) {   //tiles for deletion should have same col with new merged tile\n          newCol += 1;\n        } \n        return tile;\n      });\n    }\n    case 'up': {\n      line.sort((a, b) => a.row - b.row) // sort from less to more\n      let newRow = 1;\n      return reduceTileLine(line).map((tile, i, arr) => {\n        tile.row = newRow;\n        if (arr[i + 1] && !arr[i + 1].shouldDelete) {   //tiles for deletion should have same col with new merged tile\n          newRow += 1;\n        } \n        return tile;\n      });\n    }\n    case 'down': {\n      line.sort((a, b) => b.row - a.row) // sort from more to less\n      let newRow = size;\n      return reduceTileLine(line).map((tile, i, arr) => {\n        tile.row = newRow;\n        if (arr[i + 1] && !arr[i + 1].shouldDelete) {   //tiles for deletion should have same col with new merged tile ( order [merged, shouldDelete, shouldDelete])\n          newRow -= 1;\n        } \n        return tile;\n      }).sort((a, b) => a.row - b.row);\n    }\n  }\n};\n\nconst getTileRowsToCollapse = (tileList: TileConfig[], length: GameSize): TileConfig[][] =>  (\n  Array.from( { length } ).map((_el, i) => tileList.filter(tile => tile.row === i + 1))\n);\n\nconst getTileColsToCollapse = (tileList: TileConfig[], length: GameSize): TileConfig[][] => (\n  Array.from( { length } ).map((_el, i) => tileList.filter(tile => tile.col === i + 1))\n);\n\n// main function\nexport const getCollapsedTileList = (\n  tileList: TileConfig[],\n  direction: CollapseDirection,\n  size: GameSize,\n) => {\n  const clearedTileList = tileList.filter(tile => !tile.shouldDelete )\n  clearedTileList.forEach(tile => { delete tile.appeared; delete tile.merged; });\n  switch (direction) {\n    case \"right\":\n    case \"left\":\n      const rows = getTileRowsToCollapse(clearedTileList, size);\n      const collapsedRows = rows.map((row) => getCollapsedTileLine(row, direction, size));\n      return collapsedRows.flat();\n    case \"up\":\n    case \"down\":\n      const cols = getTileColsToCollapse(clearedTileList, size);\n      const collapsedCols = cols.map((col) => getCollapsedTileLine(col, direction, size));\n      return collapsedCols.flat();\n  }\n};\n\n\nexport const calculateFontSize = (tile: TileConfig, tileWidth: number) => {\n  switch (tile.value) {\n    case 2:\n    case 4:\n    case 8:\n    case 16:\n    case 32:\n    case 64:\n      return tileWidth * 0.55;\n    case 128:\n    case 256:\n    case 512:\n      return tileWidth * 0.45;\n    case 1024:\n    case 2048:\n      return tileWidth * 0.35;\n  }\n}\n","import React from \"react\";\nimport { useSpring, animated } from 'react-spring';\nimport \"../App.scss\";\n\nimport { tileGap, TileProps, tileWidth } from \"../App.model\";\nimport { calculateFontSize } from \"../App.service\";\n\nconst Tile: React.FC<TileProps> = ({ tile, enterLeaveStyles }) => {\n \n  const fontSize = calculateFontSize(tile, tileWidth);\n\n  const styles = useSpring({\n      top: (tile.row - 1) * (tileWidth + tileGap) + tileGap,\n      left: (tile.col - 1) * (tileWidth + tileGap) + tileGap,\n      config: { duration: 150 },\n      height: tileWidth,\n      width: tileWidth,\n      fontSize,\n  });\n\n    return (\n    <animated.div\n      className={`Tile Value-${tile.value} ${tile.merged ? 'Merged' : ''}`}\n      style={{ \n        ...styles, \n        ...enterLeaveStyles, \n      }}\n    >\n      {tile.value}\n    </animated.div>\n  );\n};\n\nexport default Tile;\n","import React from \"react\";\nimport { Transition } from 'react-spring/renderprops';\nimport \"../App.scss\";\n\nimport { TileListProps } from \"../App.model\";\nimport Tile from \"./Tile\";\n\n\nconst TileList: React.FC<TileListProps> = ({ tileList: items }) => (\n  <div>\n    <Transition\n      items={items}\n      keys={items.map(item => item.key)}\n      from={(item) => { return item.merged ? { transform: 'scale(1)' } : { transform: 'scale(0)' }}}\n      enter={{ transform: 'scale(1)' }}\n      leave={{ transform: 'scale(0)' }}\n      config={{duration: 0}}\n    >\n      {tile => styles => (\n        <Tile key={tile.key} tile={tile} enterLeaveStyles={styles} />\n      )}\n    </Transition>\n  </div>\n)\n\nexport default TileList;\n","import React, { PropsWithChildren, useEffect, useState } from 'react';\nimport useSound from 'use-sound';\n\nimport backgroundMusic from '../assets/bensound-dreams.mp3'\nimport swishSound from  '../assets/throw.mp3'\nimport { getCellMatrix, addRandomTiles as addRandomTiles, getCollapsedTileList } from '../App.service';\nimport {\n  defaultTilesToAddQuantity as quantity,\n  boardWidth,\n  CollapseDirection,\n  GameProps,\n  Keys,\n  TileConfig,\n  tileGap,\n  tileWidth,\n} from '../App.model';\nimport '../App.scss';\nimport TileList from './TileList';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\n\nconst Game: React.FC<PropsWithChildren<GameProps>> = ({ size }) => {\n  const [ tileList, setTileList ] = useState([] as TileConfig[]);   // set tileList !!!\n\n  const cellMatrix = getCellMatrix(size)\n\n  const gamedGrid = Array.from({length: size}, ((_el, i)=> {\n    return (\n      <div key={`cell-row-${i+1}`} className='Row' style={{ height: tileWidth, marginBottom: tileGap }}>\n        {Array.from({ length: size }, ((_el, j) => (\n          <div key={`cell-col-${j+1}`} className='Cell' style={{ height: tileWidth, width: tileWidth, marginRight: tileGap }}></div>\n        )))}\n      </div>\n    );\n  }))\n\n  const [ swish ] = useSound(swishSound);\n\n\n  // срабатывает полсе каждого рендера, при условии что изменились зависимости ( ..., [ ...] )\n  useEffect(() => {\n    const handleKeyPress = (event: KeyboardEvent) => {\n      const { code } = event\n      let sound = swish;\n      let direction: CollapseDirection = '' as CollapseDirection;\n      if (code === Keys.ArrowUp || code === Keys.KeyUp) {\n        direction = 'up';\n        sound = swish;\n      } else if  (code === Keys.ArrowDown || code === Keys.KeyDown) {\n        sound = swish;\n        direction = 'down';\n      }  else if  (code === Keys.ArrowRight || code === Keys.KeyRight) {\n        sound = swish;\n        direction = 'right';\n      } else if  (code === Keys.ArrowLeft || code === Keys.KeyLeft) {\n        sound = swish;\n        direction = 'left';\n      }\n      if (direction) {\n        sound()\n        const collapsedList = getCollapsedTileList(tileList, direction, size);\n        // setTileList(collapsedList)\n          const expandedList = addRandomTiles(cellMatrix, collapsedList, quantity);\n          setTileList(expandedList)\n\n\n        direction = '' as CollapseDirection;\n      }\n    }\n\n    window.addEventListener('keydown', handleKeyPress)\n    \n    return () => {\n      window.removeEventListener('keydown', handleKeyPress);\n    }\n  }, [tileList])\n\n  const gameWrapperStyle = {\n    height: boardWidth,\n    width: boardWidth,\n    padding: tileGap\n  }\n\n  const [ play, { stop, sound, pause } ] = useSound(backgroundMusic);\n  let bmId: string;\n  let notMuted = true;\n\n\n  const startNewGame = () => {\n    sound.fade(0.3,0,1500)\n    stop()\n\n    setTileList(addRandomTiles(cellMatrix, [], quantity))\n\n    bmId = sound.play()\n    sound.fade(0,0.3,3000, bmId)\n  }\n\n  const toggleMuteMusic = () => {\n    sound.mute(notMuted, bmId);\n    sound.volume(0.3, bmId);\n    //   sound.pause(bmId);\n    notMuted = !notMuted;\n  }\n\n  return (\n    <>\n      <div className='GameWrapper' style={gameWrapperStyle}>\n        <div className='GridWrapper'>{gamedGrid}</div>\n        <TileList tileList={tileList} />\n      </div>\n      <button onClick={() => startNewGame()} title='Новая игра'>\n        <FontAwesomeIcon icon={['fas', 'gamepad']} size='lg' />\n      </button>\n      <button onClick={() => toggleMuteMusic()} title='Отключить музыку'>\n        <FontAwesomeIcon icon={['fas', 'volume-mute']} size='lg' />\n      </button>\n      \n\n    </>\n  );\n}\n\nexport default Game;\n","import React from 'react';\nimport { defaultSize } from './App.model';\nimport './App.scss';\nimport AudioEffects from './components/AudioEffects';\nimport Game from './components/Game';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      2048 by GYegor\n        <Game size={defaultSize}/>\n        <AudioEffects />\n        \n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n  faCode,\n  faHighlighter,\n  faVolumeMute,\n  faGamepad,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(\n  faCode,\n  faHighlighter,\n  faVolumeMute,\n  faGamepad\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './fontawesome'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}